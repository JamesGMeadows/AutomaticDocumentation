package james.meadows.hri.documentation;

import java.io.File;
import java.util.ArrayList;

import james.meadows.hri.documentation.NetworkDomain.DomainData;
import james.meadows.hri.documentation.NetworkSwitch.SwitchData;
import james.meadows.hri.export.ExportExcel;
import james.meadows.hri.export.PortMap;

public class PropertyDocumentation {
	private ArrayList<NetworkSwitch> switches = new ArrayList<NetworkSwitch>();
	private NetworkDomain domain;
	private NetworkSwitch fireWall;
	public final static String default_switch_path = "./input/switches/";
	public final static String default_firewall_path = "./input/firewall/";
	public final static String default_domain_path = "./input/domain/";

	public NetworkDomain getDomain() {
		return domain;
	}

	public NetworkSwitch getFirewall() {
		return fireWall;
	}

	public ArrayList<NetworkSwitch> getSwitches() {
		return switches;
	}

	public NetworkSwitch getSwitch(String name) {
		for (NetworkSwitch sw : switches) {
			if (sw.getName().equals(name))
				return sw;
		}
		return null;
	}

	public void saveToExcel() {
		ExportExcel export = new ExportExcel();
		for (NetworkSwitch sw : switches) {
			export.createSwitchSheet(sw);
		}
		PortMap portMap = new PortMap(switches);
		export.createPortMapSheet(portMap);
		export.getExcel().export("Autogenerated");
	}

	public void loadSwitches(String name) {
		if (name == null || name.equalsIgnoreCase("Default Path")) {
			name = default_switch_path;
		}
		File folder = new File(name);
		for (File file : folder.listFiles()) {
			NetworkSwitch sw = NetworkSwitch.parse(file,false);
			switches.add(sw);
			if (sw.isFirewall()) {
				System.out.println("A Switch was loaded as a firewall. This may cause problems!");
			}
			System.out.println("loaded switch: " + file.getAbsolutePath());
		}
	}

	public void loadFirewall(String name) {
		if (name == null || name.equalsIgnoreCase("Default Path")) {
			name = default_firewall_path;
		}
		File folder = new File(name);
		File file = null;
		if (folder.isDirectory()) {
			if (folder.listFiles().length > 1) {
				System.out.print("Only one firewall is supported at a time. Please remove all but one firewall textfile from the folder");
			}
			file = folder.listFiles()[0];
		}
		else if (folder.isFile()) {
			file = folder;
		}
		
		if (file == null) {
			System.out.print("Invalid firewall file selected");
			return;
		}
		
		fireWall = NetworkSwitch.parse(file, true);
		if (!fireWall.isFirewall()) {
			System.out.println("A Firewall was loaded as a switch. This may cause problems!");
		}
		System.out.println("loaded firewall: " + file.getAbsolutePath());
	}

	public void loadDomain(String name) {
		if (name == null || name.equalsIgnoreCase("Default Path")) {
			name = default_domain_path;
		}
		File folder = new File(name);
		File file = null;
		if (folder.isDirectory()) {
			if (folder.listFiles().length > 1) {
				System.out.print("Only one domain is supported at a time. Please remove all but one domain textfile from the folder");
			}
			file = folder.listFiles()[0];
		}
		else if (folder.isFile()) {
			file = folder;
		}
		
		if (file == null) {
			System.out.print("Invalid domain file selected");
			return;
		}
		
		domain = new NetworkDomain(file.getAbsolutePath());
		System.out.println("loaded domain: " + file.getAbsolutePath());
	}

	public void matchSwitchToFirewall() {
		for (NetworkSwitch sw : switches) {
			for (SwitchData data : sw.getList()) {
				for (SwitchData FW_data : getFirewall().getList()) {
					if (data.mac.equalsIgnoreCase(FW_data.mac)) {
						data.vendor = FW_data.vendor;
						data.ip = FW_data.ip;
						data.inter = FW_data.inter;
					}
				}
			}
		}
	}

	public void matchDomain() {
		for (NetworkSwitch sw : switches) {
			for (SwitchData data : sw.getList()) {
				for (DomainData dom : domain.getAddress()) {
					if (dom.ip.equals(data.ip)) {
						data.name = dom.name;
					}
				}
			}
		}
	}

	public static String[] getSwitchColumns() {
		return new String[] { "Vlan", "MacAddress", "Port", "Type", "IPAddress", "Vendor", "Name", "Interface" };
	}

}
